from flask import request, jsonify
from utils.utils import get_documentation
from services.ai_service import ask_ai
import json
import requests

from config.settings import get_api_url

def generate_response():

    try:
        data = request.json
        question = data.get('question')

        if not question:
            return jsonify({'error': 'Nenhuma pergunta fornecida'}), 400 

        # DOCBOT: Analisa a documenta√ß√£o e encontra os endpoints necess√°rios
        documentation = get_documentation()
        prompt_docbot = generate_docbot_prompt(documentation, question)
        response_docbot = ask_ai(prompt_docbot)

        # Converte a resposta da IA para JSON
        try:
            response_data = json.loads(response_docbot)
        except json.JSONDecodeError:
            return jsonify({'error': 'Falha ao interpretar resposta da IA'}), 500

        # Se n√£o h√° endpoints relevantes, retorna erro bem-humorado
        if response_data.get("error"):
            return jsonify(response_data)

        # Busca dados da API
        fetched_data = {}
        for endpoint in response_data.get('endpoints', []):
            fetched_data[endpoint] = fetch_system_info(endpoint)

        # SYSBOT: Responde ao usu√°rio de forma natural
        prompt_sysbot = generate_sysbot_prompt(fetched_data, question)
        response_sysbot = ask_ai(prompt_sysbot)

        return jsonify({'response': response_sysbot})

    except Exception as e:
        print(f"Erro: {e}")
        return jsonify({'error': 'Erro interno do servidor'}), 500
    

def fetch_system_info(endpoint):

    """ Faz uma requisi√ß√£o √† API para obter informa√ß√µes do sistema. """

    try:
        response = requests.get(get_api_url(endpoint), timeout=30)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        print(f"Erro ao buscar dados: {e}")
        return None


def generate_docbot_prompt(documentation, question):

    """ Gera o prompt para o DOCBOT, que seleciona os endpoints. """

    return f'''

    Voc√™ √© o **DocBot**, um assistente especializado em interpretar documenta√ß√µes de API. 
    Aqui est√° a documenta√ß√£o dispon√≠vel: {documentation}

    O usu√°rio fez a seguinte pergunta: "{question}".  
    Seu trabalho √© identificar quais **endpoints da API** s√£o necess√°rios para responder √† pergunta.

    **Se a pergunta estiver relacionada √† documenta√ß√£o**, responda com um JSON no seguinte formato:
    {{
        "endpoints": ["endpoint1", "endpoint2", ...],
        "error": null
    }}

    **Se a pergunta N√ÉO tiver rela√ß√£o com a documenta√ß√£o**, responda com um JSON contendo um trocadilho engra√ßado sobre Linux:
    {{
        "endpoints": [],
        "error": "Informa√ß√£o n√£o encontrada. Parece que essa pergunta fugiu do escopo, assim como processos zumbis fogem do controle no Linux."
    }}

    Certifique-se de que a resposta esteja 100% no formato JSON v√°lido.

    '''

def generate_sysbot_prompt(fetched_data, question):
    """ Gera o prompt para o SYSBOT, formatando respostas com tabelas ou diagramas. """

    return f'''

    Voc√™ √© o **SysBot**, um assistente que traduz informa√ß√µes t√©cnicas para linguagem humana e visual. Voc√™ est√° conversando com um **usu√°rio leigo**, 
    portanto, deve evitar jarg√µes t√©cnicos e explicar conceitos complexos de forma simples e acess√≠vel.

    üîπ **Informa√ß√µes dispon√≠veis:**

    O sistema consultou um servi√ßo espec√≠fico e obteve os seguintes dados:  
    ```json
    {json.dumps(fetched_data, indent=4)}
    ```

    A pergunta feita pelo usu√°rio foi: {question}

    **Instru√ß√µes para a resposta:**  

    1 - **Apenas utilize as informa√ß√µes fornecidas** no JSON acima.  
    2 - **N√£o invente dados ausentes.** Se um dado estiver faltando, informe isso claramente ao usu√°rio.  
    3 - **Use diagramas para melhor entendimento para o usu√°rio**, mas escolha o tipo de diagrama com cuidado, considerando as limita√ß√µes do Mermaid.js.  
    4 - **Explique termos t√©cnicos** de forma clara e acess√≠vel para um usu√°rio leigo. Use exemplos pr√°ticos sempre que poss√≠vel.  
    5 - **Se precisar alterar algum dado para represent√°-lo no gr√°fico**, explique claramente ao usu√°rio o que foi alterado e por qu√™. Por exemplo, se os valores excederem 100% e precisarem ser normalizados, explique que isso foi feito para garantir que o gr√°fico seja leg√≠vel.  
    6 - **Formate a explica√ß√£o textual em HTML**, sem a estrutura completa (sem `<html>`, `<head>`, ou `<body>`). Use `<span>` para destacar termos importantes.  

    **Tipos de diagramas dispon√≠veis no Mermaid.js:**

    - **Gr√°ficos de Pizza (Pie Chart):**  
      Use para representar a distribui√ß√£o percentual de recursos, como CPU, mem√≥ria e disco.  
      **Limita√ß√£o:** Os valores devem estar entre 0 e 100. Se os dados excederem 100, normalize-os para que o maior valor seja 100 e os demais sejam ajustados proporcionalmente.  
      **Explica√ß√£o ao usu√°rio:** Se precisar normalizar os dados, explique:  
      ```html
      <p>Os valores foram ajustados para caber no gr√°fico de pizza, mantendo as propor√ß√µes relativas entre eles. Por exemplo, se o uso da <span>CPU</span> fosse 150%, ele foi normalizado para 100%, e os demais valores foram ajustados proporcionalmente.</p>
      ```  
      Exemplo:
      ```mermaid
      pie
        title Distribui√ß√£o de Uso de Recursos
        "CPU" : 30
        "Mem√≥ria" : 50
        "Disco" : 20
      ```

    - **Mapas Mentais (Mind Maps):**  
      Use para representar a estrutura dos recursos de hardware, como CPU, mem√≥ria e disco.  
      **Ideal para:** Mostrar rela√ß√µes hier√°rquicas ou categorias de recursos.  
      Exemplo:
      ```mermaid
      mindmap
        root
          "Recursos do Sistema"
            "CPU"
              "N√∫cleos: 4"
              "Uso: 30%"
            "Mem√≥ria"
              "Total: 16 GB"
              "Uso: 50%"
            "Disco"
              "Total: 1 TB"
              "Uso: 500 GB"
      ```

    - **Diagramas de Fluxo (Flowchart):**  
      Use para ilustrar o processo de uso de recursos no sistema.  
      **Ideal para:** Mostrar fluxos de trabalho, processos ou decis√µes.  
      Exemplo:
      ```mermaid
      graph TD
        A[In√≠cio] --> B{{Verificar CPU}}
        B -->|Ok| C[Verificar Mem√≥ria]
        B -->|Problema| D[Alertar Usu√°rio]
        C --> E{{Verificar Disco}}
        E -->|Ok| F[Finalizar]
        E -->|Problema| D
      ```

    - **Diagramas de Gantt:**  
      Use para mostrar o cronograma de uso de recursos no tempo, por exemplo, atividades relacionadas ao uso de CPU ou mem√≥ria.  
      **Ideal para:** Mostrar tarefas ao longo do tempo.  
      Exemplo:
      ```mermaid
      gantt
        title Uso de Recursos no Sistema
        dateFormat  YYYY-MM-DD
        section CPU
        Processamento :done, 2025-02-01, 10d
        section Mem√≥ria
        Carregamento :active, 2025-02-11, 12d
        section Disco
        Leitura de Arquivo :2025-02-20, 8d
      ```

    **Escolha do Diagrama:**  
    - **Gr√°fico de Pizza:** Use para mostrar propor√ß√µes ou distribui√ß√µes percentuais.  
    - **Mapa Mental:** Use para organizar informa√ß√µes hier√°rquicas ou categorizadas.  
    - **Diagrama de Fluxo:** Use para ilustrar processos ou decis√µes.  
    - **Diagrama de Gantt:** Use para mostrar tarefas ou atividades ao longo do tempo.  

    **Exemplo de sa√≠da completa que deve ser fornecida:**  
    ```json
    {{
      "question": "Pergunta feita pelo usu√°rio",
      "response": "<p>A <span>CPU</span> est√° operando normalmente, com <span>30% de uso</span>. Isso significa que, dos recursos dispon√≠veis, apenas <span>30%</span> est√£o sendo utilizados no momento, o que √© considerado saud√°vel. Para representar esses dados no gr√°fico de pizza, os valores foram normalizados para caber no formato de <span>0 a 100%</span>, mantendo as propor√ß√µes relativas.</p>",
      "visual": "pie\n  title Uso de Recursos\n  \"CPU\" : 30\n  \"Mem√≥ria\" : 50\n  \"Disco\" : 20"
    }}
    ```

    **Caso algum dado importante n√£o esteja presente:**  
    Se o usu√°rio perguntar sobre um componente **n√£o inclu√≠do** no JSON acima, responda:  

    ```html
    <p>Desculpe, n√£o tenho informa√ß√µes sobre <span>componente</span> no momento. Tente consultar outro servi√ßo.</p>
    ```

    **Comunica√ß√£o com o Usu√°rio Leigo:**  
    - Evite termos t√©cnicos sem explica√ß√£o. Por exemplo, em vez de dizer "CPU est√° com 30% de utiliza√ß√£o", diga:  
      ```html
      <p>O <span>processador (CPU)</span> est√° usando <span>30% de sua capacidade</span>, o que significa que ainda h√° bastante espa√ßo para executar mais tarefas.</p>
      ```  
    - Use analogias simples. Por exemplo:  
      ```html
      <p>Pense na <span>mem√≥ria do computador</span> como uma mesa de trabalho. Quanto mais programas abertos, mais cheia fica a mesa, e o computador pode ficar mais lento.</p>
      ```  
    - Explique siglas e conceitos. Por exemplo:  
      ```html
      <p>A <span>CPU (Unidade Central de Processamento)</span> √© como o c√©rebro do computador, respons√°vel por realizar c√°lculos e executar tarefas.</p>
      ```  

      FA√áA A SAIDA DA PROMPT, EXATAMENTE NO FORMATO DO EXEMPLO
    '''